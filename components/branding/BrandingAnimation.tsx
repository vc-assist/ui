import { motion, useSpring } from "framer-motion"
import { useEffect, useState } from "react"
import { twMerge } from "tailwind-merge"

// this value is > 1 because I'm afraid of floating point error
const PATH_LENGTH_CONSTANT = 100

function DrawIcon(props: { className?: string }) {
  const containerSpring = useSpring(PATH_LENGTH_CONSTANT, {
    duration: 3000,
    bounce: 0,
  })
  const tickSpring = useSpring(PATH_LENGTH_CONSTANT, {
    duration: 5000,
    bounce: 0,
  })

  useEffect(() => {
    containerSpring.set(0)
    tickSpring.set(0.3 * PATH_LENGTH_CONSTANT)
  }, [containerSpring, tickSpring])

  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: How do you fix this?
    <svg className={props.className} viewBox="0 0 100 100">
      <g style={{ display: "inline" }}>
        <motion.path
          style={{
            display: "inline",
            strokeDasharray: PATH_LENGTH_CONSTANT,
            strokeDashoffset: containerSpring,
          }}
          d="M 77.514524,0.00112166 C 62.711147,0.06609385 15.284322,2.9418051 15.284322,2.9418051 14.222967,2.9977279 8.8784496,4.6056398 4.595803,12.432331 3.7020338,17.236364 2.4486807,79.130161 2.6721269,82.370093 c 0,1.899265 -0.2221718,11.831311 11.2834291,17.5402 11.172131,0.335167 70.391012,-0.384966 72.737162,-0.273234 2.346128,0.111733 8.475398,-6.499737 9.94357,-14.188497 1.402805,-7.346523 2.308404,-65.977736 2.308404,-65.977736 0,0 -2.792821,-14.318916 -17.316584,-19.30915491 -0.549829,-0.1220361 -1.998807,-0.16982472 -4.113584,-0.16054943 z"
          pathLength={PATH_LENGTH_CONSTANT}
          animate={{
            fill: ["rgba(0,0,0,0)", "rgba(1,124,253,1)"],
            stroke: ["rgb(0,0,0)", "rgb(255,255,255)"],
            strokeWidth: [1.5, 0],
          }}
          transition={{
            duration: 0.75,
            delay: 2.5,
          }}
        />
        <motion.path
          style={{
            display: "inline",
            strokeDasharray: PATH_LENGTH_CONSTANT,
            strokeDashoffset: tickSpring,
          }}
          d="M 46.596057,90.383657 C 29.172403,89.191845 14.059561,76.078558 10.980994,59.480757 5.2359898,28.507089 36.705495,3.4783254 65.330325,16.254912 c 6.156134,2.747767 6.554531,3.264391 4.096591,5.312117 -0.454522,0.378671 -1.312141,1.17508 -1.905794,1.769806 -1.423039,1.425581 -1.352711,1.413176 -2.869995,0.50596 -17.210986,-10.290889 -41.38448,2.603318 -44.849045,23.92261 -3.825837,23.54238 18.750066,41.504077 41.174756,32.7592 11.760338,-4.586136 20.689251,-17.931645 20.046275,-29.96195 -0.129199,-2.41737 -0.263639,-3.918847 -0.413784,-4.621171 -0.222347,-1.040153 -0.199119,-1.086224 0.994648,-1.973725 0.571317,-0.424721 1.565522,-1.208444 2.209347,-1.741585 2.509919,-2.078454 2.649207,-2.09548 3.074345,-0.37552 C 93.204105,67.40411 72.647372,92.165608 46.596057,90.383657 Z M 28.997302,70.94989 c -2.209837,-1.104268 -2.17912,-2.516946 0.09195,-4.228231 4.008688,-3.020646 6.860585,-2.039105 4.358845,1.50019 -1.963548,2.777897 -3.035807,3.435121 -4.450786,2.728041 z m 23.075635,-3.638374 c -0.07999,-0.02983 -0.341694,-0.196239 -0.58162,-0.369848 -2.73248,-1.977398 -10.433611,-5.006202 -15.509734,-6.099873 -1.825536,-0.393313 -2.150025,-0.650908 -2.711977,-2.15286 -0.940192,-2.512868 -0.421815,-7.014759 0.925891,-8.040949 1.281582,-0.975848 5.807978,0.731019 11.905614,4.489497 2.500961,1.54155 2.520912,1.534829 3.510668,-1.182074 2.621584,-7.196355 16.503872,-23.816796 23.496239,-28.130651 4.004901,-2.470761 4.461989,-2.571298 6.695017,-1.472669 3.67143,1.80632 5.514094,4.297485 6.495614,8.781627 0.334645,1.528807 0.01898,2.0677 -1.859418,3.173865 -4.118712,2.425538 -8.47864,5.566991 -11.379679,8.199397 -9.076731,8.236239 -15.174106,15.139333 -18.999929,21.510595 -0.709634,1.18178 -1.283978,1.555853 -1.986686,1.293943 z M 23.932835,52.709652 c -0.98467,-0.279818 -1.278087,-0.846016 -1.211722,-2.33822 0.105691,-2.376326 1.259115,-2.801836 4.305655,-1.588377 2.512874,1.000894 3.312669,1.908223 2.709767,3.074106 -0.352069,0.680825 -4.344271,1.267235 -5.8037,0.852491 z m 9.161434,-13.61883 c -1.472838,-0.521721 -4.284748,-3.31627 -4.285571,-4.259117 -0.0022,-2.469904 2.97605,-3.07682 4.449679,-0.90681 2.336965,3.441324 2.254945,6.022812 -0.164108,5.165927 z"
          pathLength={PATH_LENGTH_CONSTANT}
          animate={{
            stroke: ["rgb(0,0,0)", "rgb(255,255,255)"],
            fill: ["rgba(0,0,0,0)", "rgba(255,255,255,1)"],
            strokeWidth: [1.5, 0],
          }}
          transition={{
            duration: 0.75,
            delay: 2.5,
          }}
        />
      </g>
    </svg>
  )
}

function DrawBranding(props: {
  className?: string
  onAnimationComplete?: () => void
}) {
  const [showTitle, setShowTitle] = useState(false)

  useEffect(() => {
    setTimeout(() => setShowTitle(true), 3000)
  }, [])

  return (
    <div className={twMerge(props.className, "flex items-center gap-4")}>
      <DrawIcon className="min-w-[80px] min-h-[80px] max-w-[80px] max-h-[80px]" />
      {showTitle ? (
        <motion.h1
          className="overflow-hidden text-5xl font-black whitespace-nowrap"
          initial={{ width: 0 }}
          animate={{ width: 215 }}
          transition={{
            type: "spring",
            damping: 15,
            duration: 1,
          }}
          onAnimationComplete={props.onAnimationComplete}
        >
          VC Assist
        </motion.h1>
      ) : undefined}
    </div>
  )
}

export function StaticDrawIcon(props: { className?: string }) {
  return (
    <svg className={props.className} viewBox="0 0 100 100">
      <title>Branding animation</title>
      <g style={{ display: "inline" }}>
        <path
          style={{
            display: "inline",
            fill: "rgba(1,124,253,1)",
            stroke: "none",
          }}
          d="M 77.514524,0.00112166 C 62.711147,0.06609385 15.284322,2.9418051 15.284322,2.9418051 14.222967,2.9977279 8.8784496,4.6056398 4.595803,12.432331 3.7020338,17.236364 2.4486807,79.130161 2.6721269,82.370093 c 0,1.899265 -0.2221718,11.831311 11.2834291,17.5402 11.172131,0.335167 70.391012,-0.384966 72.737162,-0.273234 2.346128,0.111733 8.475398,-6.499737 9.94357,-14.188497 1.402805,-7.346523 2.308404,-65.977736 2.308404,-65.977736 0,0 -2.792821,-14.318916 -17.316584,-19.30915491 -0.549829,-0.1220361 -1.998807,-0.16982472 -4.113584,-0.16054943 z"
        />
        <path
          style={{
            display: "inline",
            strokeDasharray: PATH_LENGTH_CONSTANT,
            stroke: "none",
            fill: "rgba(255,255,255,1)",
          }}
          d="M 46.596057,90.383657 C 29.172403,89.191845 14.059561,76.078558 10.980994,59.480757 5.2359898,28.507089 36.705495,3.4783254 65.330325,16.254912 c 6.156134,2.747767 6.554531,3.264391 4.096591,5.312117 -0.454522,0.378671 -1.312141,1.17508 -1.905794,1.769806 -1.423039,1.425581 -1.352711,1.413176 -2.869995,0.50596 -17.210986,-10.290889 -41.38448,2.603318 -44.849045,23.92261 -3.825837,23.54238 18.750066,41.504077 41.174756,32.7592 11.760338,-4.586136 20.689251,-17.931645 20.046275,-29.96195 -0.129199,-2.41737 -0.263639,-3.918847 -0.413784,-4.621171 -0.222347,-1.040153 -0.199119,-1.086224 0.994648,-1.973725 0.571317,-0.424721 1.565522,-1.208444 2.209347,-1.741585 2.509919,-2.078454 2.649207,-2.09548 3.074345,-0.37552 C 93.204105,67.40411 72.647372,92.165608 46.596057,90.383657 Z M 28.997302,70.94989 c -2.209837,-1.104268 -2.17912,-2.516946 0.09195,-4.228231 4.008688,-3.020646 6.860585,-2.039105 4.358845,1.50019 -1.963548,2.777897 -3.035807,3.435121 -4.450786,2.728041 z m 23.075635,-3.638374 c -0.07999,-0.02983 -0.341694,-0.196239 -0.58162,-0.369848 -2.73248,-1.977398 -10.433611,-5.006202 -15.509734,-6.099873 -1.825536,-0.393313 -2.150025,-0.650908 -2.711977,-2.15286 -0.940192,-2.512868 -0.421815,-7.014759 0.925891,-8.040949 1.281582,-0.975848 5.807978,0.731019 11.905614,4.489497 2.500961,1.54155 2.520912,1.534829 3.510668,-1.182074 2.621584,-7.196355 16.503872,-23.816796 23.496239,-28.130651 4.004901,-2.470761 4.461989,-2.571298 6.695017,-1.472669 3.67143,1.80632 5.514094,4.297485 6.495614,8.781627 0.334645,1.528807 0.01898,2.0677 -1.859418,3.173865 -4.118712,2.425538 -8.47864,5.566991 -11.379679,8.199397 -9.076731,8.236239 -15.174106,15.139333 -18.999929,21.510595 -0.709634,1.18178 -1.283978,1.555853 -1.986686,1.293943 z M 23.932835,52.709652 c -0.98467,-0.279818 -1.278087,-0.846016 -1.211722,-2.33822 0.105691,-2.376326 1.259115,-2.801836 4.305655,-1.588377 2.512874,1.000894 3.312669,1.908223 2.709767,3.074106 -0.352069,0.680825 -4.344271,1.267235 -5.8037,0.852491 z m 9.161434,-13.61883 c -1.472838,-0.521721 -4.284748,-3.31627 -4.285571,-4.259117 -0.0022,-2.469904 2.97605,-3.07682 4.449679,-0.90681 2.336965,3.441324 2.254945,6.022812 -0.164108,5.165927 z"
        />
      </g>
    </svg>
  )
}

function StaticBranding(props: {
  className?: string
}) {
  return (
    <div className={twMerge(props.className, "flex items-center gap-4")}>
      <StaticDrawIcon className="min-w-[80px] min-h-[80px] max-w-[80px] max-h-[80px]" />
      <h1
        className="overflow-hidden text-5xl font-black whitespace-nowrap"
        style={{ width: 215 }}
      >
        VC Assist
      </h1>
    </div>
  )
}

export function LoadingAnimation(props: {
  onAnimationComplete?: () => void
}) {
  const [animFinished, setAnimFinished] = useState(false)
  return (
    <div className="flex w-full h-full">
      <div className="m-auto flex flex-col items-center gap-3">
        {animFinished ? (
          <>
            <StaticBranding />
            <motion.h4
              className="text-xl overflow-hidden font-bold whitespace-nowrap"
              initial={{ y: -10 }}
              animate={{ y: 0 }}
            >
              Loading...
            </motion.h4>
          </>
        ) : (
          <DrawBranding
            className="m-auto"
            onAnimationComplete={() => {
              setAnimFinished(true)
              props.onAnimationComplete?.()
            }}
          />
        )}
      </div>
    </div>
  )
}
